.list
.lall
.sfcond
.286
page 62, 132
title BOOT - Bootsektor fÅr PMFORMAT

comment "
    PMFORMAT.C -- Ein Formatierprogramm fÅr Disketten

    Modul 6: Bootsektor

    Dieser Bootsektor entspricht dem des Formatierprogrammes der
    OS/2 - Version 1.3; er liefert jedoch eine Versionsnummer von
    OS/2 - Version 2.0.

    Version 1.1 - 15.4.1991
    Version 1.2 - 9.6.1991  > énderung der Version in 10.3;
                              sprachabhÑngiger Schalter fÅr Fehlermeldungen
    Version 1.3 - 9.11.1991
    Version 2.0 - 20.9.1992 > vereinfachte Segmentdirektiven wurden durch segment ersetzt,
                              um fÅr OS/2 2.0 eine eigene Gruppe fÅr 16-Bit Segmente zu
                              erzeugen.
"

DGROUP16  group     BOOT

BOOT      segment   para 'FAR_DATA'     ; Align: para, Combine: private, Class: FAR_DATA

          assume    CS:DGROUP16, DS:DGROUP16, SS:NOTHING
          public    BiosBPB
          public    BootSect
          public    Serial
          public    EndOfBPB

BootSect  label     byte
          JMP       near ptr BOOTUP     ;NOP
LBL0003   DB        "IBM 20.0"

BiosBPB   label     byte
SECSIZ    DW        512                 ;0Bh | USHORT usBytesPerSector
CLUSTSIZ  DB        2                   ;0Dh | BYTE   bSectorsPerCluster
RESSECT   DW        1                   ;0Eh | USHORT usReservedSectors
NUMFATS   DB        2                   ;10h | BYTE   cFATs
DIRENTR   DW        112                 ;11h | USHORT cRootEntries
NUMSECT   DW        720                 ;13h | USHORT cSectors
MEDIAFLG  DB        0FDH                ;15H | BYTE   bMedia
FATSIZ    DW        2                   ;16H | USHORT usSectorsPerFAT
SECTPTR   DW        9                   ;18H | USHORT usSectorsPerTrack
NUMHEADS  DW        2                   ;1AH | USHORT cHeads
PARTOFFS  DW        0, 0                ;1CH | ULONG  cHiddenSectors
RESERVD1  DB        4 dup (0)           ;20H | ULONG  cLargeSectors
EndOfBPB  label     byte
RDDRIVE   DB        0                   ;24H
RDHEAD    DB        0                   ;25H
RESERVD2  DB        029H                ;26H
SERIAL    DB        0, 0, 0, 0          ;27H
RESERVD3  DB        "NO NAME    FAT     "         ;2BH

BOOTUP:   XOR       AX, AX              ;3EH
          MOV       SS, AX
          MOV       SP, offset [7C00H]
          MOV       BX, offset [07C0H]
          MOV       DS, BX
          MOV       AL, byte ptr[NUMFATS]
          MUL       word ptr[FATSIZ]
          ADD       AX, word ptr[RESSECT]
          PUSH      AX                  ;Erster Directory-Sektor
          XCHG      AX, CX
          MOV       AX, 20h
          MUL       word ptr[DIRENTR]   ;Directory Size
          MOV       BX, word ptr[SECSIZ]
          ADD       AX, BX
          DEC       AX
          DIV       BX                  ;Calculate Size of Dir in Sects
          PUSH      AX
          ADD       AX, CX              ;First Sector after directory
          MOV       word ptr[FIRSTSEC], AX
          MOV       AX, 1000h
          MOV       ES, AX
          XOR       BX, BX
          POP       AX
          MOV       byte ptr[RDNUMSEC], AL
          POP       word ptr[RDANFSEC]
          MOV       word ptr[RDANFSEC+2], 0
          CALL      near ptr READSECT
          XOR       BX, BX
          MOV       CX, word ptr[DIRENTR]
COMPDIRS: MOV       DI, BX
          PUSH      CX
          MOV       CX, 11
          MOV       SI, offset [OS2LDR]
      REP CMPSB
          POP       CX
          JZ        DIRFOUND
          ADD       BX, 20H
          LOOP      COMPDIRS
DIRFOUND: JCXZ      NOLOADER
          MOV       AX, ES:[BX+1CH]               ;Get Size (in Byte)
          XOR       DX, DX
          DIV       word ptr[SECSIZ]
          INC       AL
          MOV       byte ptr[RDNUMSEC], AL
          MOV       DX, ES:[BX+1AH]               ;Get Start (in Cluster)
          DEC       DX
          DEC       DX
          MOV       AL, byte ptr[CLUSTSIZ]
          XOR       AH, AH
          MUL       DX
          ADD       AX, word ptr[FIRSTSEC]
          ADC       DX, 0
          MOV       word ptr[RDANFSEC], AX
          MOV       word ptr[RDANFSEC+2], DX
          MOV       BX, 2000h
          MOV       ES, BX
          XOR       BX, BX
          PUSH      ES
          PUSH      BX
          CALL      near ptr READSECT
          MOV       BX, word ptr[FIRSTSEC]
          MOV       DL, byte ptr[RDDRIVE]
          LEA       SI, word ptr[SECSIZ]
          MOV       AX, 1000h
          MOV       ES, AX
          XOR       DI, DI
          XOR       DH, DH
          RET 

NOLOADER: MOV       SI, offset [KEINLDR]          ;0ECH
          JMP       short @F
READERR:  MOV       SI, offset [LESEFEHL]         ;0F1H
@@:       CALL      near ptr PRTSTR
          MOV       SI, offset [NEUSTART]
          CALL      near ptr PRTSTR
          STI
ENDLOS:   JMP       ENDLOS

PRTSTR:   LODSB
          OR        AL, AL
          JZ        PRTEND
          MOV       AH, 0Eh
          MOV       BX, 7
          INT       10h
          JMP       PRTSTR
PRTEND:   RETN

READSECT: MOV       AX, word ptr[RDANFSEC]        ;010F
          MOV       DX, word ptr[RDANFSEC+2]
          ADD       AX, word ptr[PARTOFFS]
          ADC       DX, word ptr[PARTOFFS+2]
          DIV       word ptr[SECTPTR]
          INC       DL
          MOV       byte ptr [RDSECTOR], DL
          XOR       DX, DX
          DIV       word ptr[NUMHEADS]
          MOV       byte ptr[RDHEAD], DL
          MOV       word ptr[RDCYL], AX
          MOV       AX, word ptr[SECTPTR]
          SUB       AL, byte ptr[RDSECTOR]
          INC       AX
          PUSH      AX
          MOV       AH, 2
          MOV       DX, word ptr[RDCYL]
          MOV       CL, 6
          SHL       DH, CL
          OR        DH, byte ptr[RDSECTOR]
          MOV       CX, DX
          XCHG      CH, CL
          MOV       DX, word ptr[RDDRIVE]
          INT       13h
          POP       AX
          JC        READERR
          SUB       byte ptr[RDNUMSEC], AL
          JNA       ENDREAD
          ADD       word ptr[RDANFSEC], AX
          ADC       word ptr[RDANFSEC+2], 0
          MUL       word ptr [SECSIZ]
          ADD       BX, AX
          JMP       READSECT
ENDREAD:  RETN

          DW        lenLF
ifdef     GERMAN
LESEFEHL  DB        "Lesefehler DatentrÑger", 0DH, 0AH, 0
else
LESEFEHL  DB        "A disk error occured", 0DH, 0AH, 0
endif
lenLF     equ       $ - offset LESEFEHL


          DW        lenKL
ifdef     GERMAN
KEINLDR   DB        "OS2LDR nicht gefunden", 0DH, 0AH, 0
else
KEINLDR   DB        "The file OS2LDR cannot be found", 0DH, 0AH, 0
endif
lenKL     equ       $ - offset KEINLDR

          DW        lenNS
ifdef     GERMAN
NEUSTART  DB        "Systemdiskette einlegen, das System neu starten.", 0DH, 0AH, 0
else
NEUSTART  DB        "Insert a system diskette and", 0DH, 0AH
          DB        "restart the system", 0DH, 0AH, 0
endif
lenNS     equ       $ - offset NEUSTART

OS2LDR    DB        "OS2LDR     "

          org       1FEH
LBL01FE   DB        055H, 0AAH

RDANFSEC  DW        2 dup (?)
RDCYL     DW        1 dup (?)
RDSECTOR  DB        1 dup (?)
RDNUMSEC  DB        1 dup (?)
FIRSTSEC  DW        1 dup (?)

BOOT      ends

          end
